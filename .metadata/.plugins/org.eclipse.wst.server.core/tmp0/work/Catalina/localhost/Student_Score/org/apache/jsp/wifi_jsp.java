/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-05-29 18:04:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.io.*;

public final class wifi_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" <!--java import-->\r\n");
      out.write(" <!--java import-->\r\n");
 
    String fromParam = request.getParameter("from"); // input받은 from 값 변수에 저장
    String cntParam = request.getParameter("cnt"); // input받은 cnt 값 변수에 저장
    
    int from = 0; // 변수 초기값 지정
    int cnt = 10; // 변수 초기값 지정
	int fromByTen = 0; // 변수 초기값 지정
    int LineCnt = 1; // 변수 초기값 지정
    
    int totalcount=0;
    int countCheck=0;
    int minPage=0;
    int maxPage=0;
    int pageCheck=0;
    int startPage=0;
    int endPage=0;
    int P=0;
    int PP=0;
    int N=0;
    int NN=0;

    double lat = 37.3860521; // 현재 위치 위도 값 지정
    double lng = 127.1214038; // 현재 위치 경도 값 지정

    //  파일 경로 변수에 저장
    File f = new File(getServletContext().getRealPath("/resource/전국무료와이파이표준데이터.txt"));
    // BufferedReader로 파일 경로 값 읽기 
    BufferedReader br = new BufferedReader(new FileReader(f));
    String readtxt; // 변수 선언

    List<String> wifi = new ArrayList<String>(); // new 리스트 선언

    // 각 변수의 값이 null 아니면 true 조건 
    if (fromParam != null && cntParam != null) {
        from = Integer.parseInt(fromParam); // 정수로 형변환 값 저장
        cnt = Integer.parseInt(cntParam);   // 정수로 형변환 값 저장
        // from을 정제하여 fromByTen 변수에 저장
		fromByTen = (int) (Math.floor((from - 1) / 10) * 10);
    }

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("    <title>전국 무료 와이파이 표준 데이터</title> <!--타이틀 작성-->\r\n");
      out.write("    <style>\r\n");
      out.write("    	a {text-decoration-line: none;}   \r\n");
      out.write("        .custom-size {font-size: 25px;}        \r\n");
      out.write("    </style> <!--링크 밑줄 없앰 스타일 적용-->\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      try { // 예외 처리
            if((readtxt = br.readLine())==null){        // 파일에서 한줄 읽은 값이 null이 아니면 true 조건
                out.println("빈 파일입니다."+"<br>");   // 문구 출력
                return; // 리턴
            }
            
            while((readtxt=br.readLine())!=null){       // 파일에서 한줄 읽은 값이 null이 아니면 true 반복문
                String[] field = readtxt.split("\t");   // 탭 기준으로 구분해서 field 배열에 값 저장
                // 필요한 배열값만 뽑아서 한 문자열로 합친 후 wifi 리스트 저장 
                double dist = Math.sqrt(Math.pow(Double.parseDouble(field[13])-lat,2)+Math.pow(Double.parseDouble(field[14])-lng,2));
                wifi.add(String.valueOf(LineCnt)+"\t"+field[9]+"\t"+String.valueOf(field[13])+"\t"+String.valueOf(field[14])+"\t"+String.valueOf(dist));
                LineCnt++; // 1 추가 
            }
            
            
         	// 1. 총 데이터 수
        	totalcount = wifi.size();

        	// 2. 현재 카운트 조정
        	countCheck = (cnt > totalcount || cnt < 1) ? totalcount : cnt;

        	// 3. 최소 페이지 수
        	minPage = 1;

        	// 4. 최대 페이지 수
        	maxPage = (totalcount % countCheck == 0) ? (totalcount / countCheck) : (totalcount / countCheck) + 1;

        	// 5. C 현재 페이지 조정
        	/* 현재페이지가 0보다 작으면 */
        	if (from <= minPage){pageCheck = minPage;}
        	/* 현재 페이지가 최대페이지 보다 크면 */
        	else if (from > maxPage){pageCheck = maxPage;}
        	/* 1 ~ 최대페이지 */
        	else{pageCheck = from;}
        	
        	// 6. S 현재 페이지의 처음
        	startPage = (((int) ((pageCheck - 1) / 10)) * 10) + 1;

        	// 7. E 현재 페이지의 마지막
        	endPage = (startPage + 9 >= maxPage) ? maxPage : startPage + 9;

        	// 8. <, <<
        	P = (startPage <= minPage) ? 1 : startPage - 10;
        	PP = (P == 1) ? 1 : minPage;

        	// 9. >, >>
        	N = (endPage + 1 <= maxPage) ? endPage + 1 : endPage;
        	NN = (N == endPage) ? endPage : maxPage;
        	
            while(true){ // true 반복문

      out.write("\r\n");
      out.write("                <table border =\"1\" align = center width = 70%;  style=\"table-layout: auto;\"> <!--테이블 지정-->\r\n");
      out.write("                    <tr align = center style = \"font-weight : bold;\"><td>번호</td><td>주소</td><td>위도</td><td>경도</td><td>거리</td></tr> <!--tr,td 지정--> \r\n");
      out.write("                    \r\n");
              for(int i = startPage; i <= endPage; i++){ // cnt의 값에 따라 바뀌는 반복문
 				   String[] listcut = wifi.get(i-1).split("\t");         // wifi 리스트의 i값 가져와서 배열에 탭기준 구분 저장

      out.write("\r\n");
      out.write("					<tr>\r\n");
      out.write("					<td align = center style = \"font-weight : bold;\">");
      out.print(listcut[0]);
      out.write("</td> <!--배열 0번째 값-->\r\n");
      out.write("					<td>");
      out.print(listcut[1] );
      out.write("</td>                                             <!--배열 1번째 값-->\r\n");
      out.write("					<td>");
      out.print(listcut[2] );
      out.write("</td>                                             <!--배열 2번째 값-->\r\n");
      out.write("					<td>");
      out.print(listcut[3] );
      out.write("</td>                                             <!--배열 3번째 값-->\r\n");
      out.write("					<td>");
      out.print(listcut[4]);
      out.write("</td>                                              <!--배열 4번째 값-->\r\n");
      out.write("					</tr>\r\n");
              
               } break;    // 반복문이 다 돌고 난후 break;
            }
        } catch (Exception e) { // 에러 catch
            // out.print("에러메시지 : " + e +"<br>");
        } finally {
        br.close();             // BufferedReader 종료
        }


      out.write("      \r\n");
      out.write("        </table>  \r\n");
      out.write("        <table border=\"1\" border-collapse:collapse; align = center width = 70%; style=\"table-layout: fixed;\">                   <!--테이블-->\r\n");
      out.write("            <tr align = center>         <!--tr 설정-->\r\n");
      out.write("            	<td><a href=\"helloworld.jsp?from=");
      out.print(PP);
      out.write("&cnt=");
      out.print(countCheck);
      out.write("\"><<</a></td>\r\n");
      out.write("            	<td><a href=\"helloworld.jsp?from=");
      out.print(P);
      out.write("%>&cnt=");
      out.print(countCheck);
      out.write("\"><</a></td>\r\n");
      out.write("            	\r\n");
              int num = 0;
                for(int i = startPage; i <= endPage; i++){ 
					if(pageCheck == startPage+num){ 
      out.write("                                                                            <!--1~10까지 도는 반복문-->\r\n");
      out.write("                		<td class=\"custom-size\"><a href=\"helloworld.jsp?from=");
      out.print(startPage+num);
      out.write("&cnt=");
      out.print(countCheck);
      out.write('"');
      out.write('>');
      out.print(startPage+num);
      out.write("</a></td>                         <!-- 테이블 링크 연결 -->\r\n");
              		num++;
					}else { 
      out.write("\r\n");
      out.write("            			<td ><a href=\"helloworld.jsp?from=");
      out.print(startPage+num);
      out.write("&cnt=");
      out.print(countCheck);
      out.write('"');
      out.write('>');
      out.print(startPage+num);
      out.write("</a></td>\r\n");
            			num++;
					} 
      out.write('\r');
      out.write('\n');
            	} num = 0;
      out.write("\r\n");
      out.write("            	<td><a href=\"helloworld.jsp?from=");
      out.print(N);
      out.write("&cnt=");
      out.print(countCheck);
      out.write("\">></a></td>  \r\n");
      out.write("            	<td><a href=\"helloworld.jsp?from=");
      out.print(NN);
      out.write("&cnt=");
      out.print(countCheck);
      out.write("\">>></a></td>  \r\n");
      out.write("			</tr>\r\n");
      out.write("        </table>\r\n");
      out.write("    </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
