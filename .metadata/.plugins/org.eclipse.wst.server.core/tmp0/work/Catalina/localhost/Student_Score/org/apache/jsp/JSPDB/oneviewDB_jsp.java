/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-06-03 13:52:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.JSPDB;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import javax.sql.*;
import java.io.*;

public final class oneviewDB_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.sql");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" <!--java import-->\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("    	<style>\r\n");
      out.write("    	@font-face {\r\n");
      out.write("                    font-family: \"D2CodingLigature\";\r\n");
      out.write("                    src: url(./D2CodingLigature/D2CodingBold-Ver1.3.2-20180524-ligature.ttf) format(\"truetype\");\r\n");
      out.write("                    font-weight: normal;\r\n");
      out.write("                }\r\n");
      out.write("                /*body 폰트 지정*/\r\n");
      out.write("                body{\r\n");
      out.write("                    font-family: 'D2CodingLigature',serif;\r\n");
      out.write("                }\r\n");
      out.write("		  table {\r\n");
      out.write("		    border-collapse: collapse;\r\n");
      out.write("		    width : 75%;\r\n");
      out.write("		  }\r\n");
      out.write("		  th, td {\r\n");
      out.write("		    border-bottom: 1px solid #444444;\r\n");
      out.write("		    padding: 10px;\r\n");
      out.write("		  }\r\n");
      out.write("		  th:first-child, td:first-child {\r\n");
      out.write("		    border-left: none;\r\n");
      out.write("		  }\r\n");
      out.write("		\r\n");
      out.write("		.fourth {\r\n");
      out.write("		  background: gold;\r\n");
      out.write("		  border-color: white;\r\n");
      out.write("		  color: black;\r\n");
      out.write("		  background-image: linear-gradient(45deg, yellow 50%, transparent 50%);\r\n");
      out.write("		  background-position: 100%;\r\n");
      out.write("		  background-size: 400%;\r\n");
      out.write("		  transition: background 300ms ease-in-out;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		.fourth:hover {\r\n");
      out.write("		  background-position: 0;\r\n");
      out.write("		}\r\n");
      out.write("		input{\r\n");
      out.write("			width: 200px; \r\n");
      out.write("			height: 40px; \r\n");
      out.write("			padding: 0px;\r\n");
      out.write("		}\r\n");
      out.write("		p{\r\n");
      out.write("		text-align: center;}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		  a {text-decoration-line: none; color: #696969;}\r\n");
      out.write("		  a:hover {\r\n");
      out.write("			  background-color: gold;\r\n");
      out.write("			  border-color: white;\r\n");
      out.write("			  color: black;\r\n");
      out.write("			  font-size : 15px;\r\n");
      out.write("			  background-image: linear-gradient(45deg, white 50%, transparent 50%);\r\n");
      out.write("			  background-position: 100%;\r\n");
      out.write("		  	  background-size: 400%;\r\n");
      out.write("			  transition: background 300ms ease-in-out;\r\n");
      out.write("		}\r\n");
      out.write("		.custom-size {\r\n");
      out.write("        	font-size: 15px;\r\n");
      out.write("        	background-color: gold;\r\n");
      out.write("        } \r\n");
      out.write("		</style>\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      try{
		// key값 저장
	    String key = request.getParameter("key");
	
		//DB연동
        Class.forName("com.mysql.jdbc.Driver");
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/noheul","root","shdmf1030@");
        //Connection conn = DriverManager.getConnection("jdbc:mysql://192.168.23.60:3307/kopo11","root","shdmf1030@");
        // key값 으로 찾는 쿼리문
        String query = "select * from (select *, kor+eng+mat as sum, (kor+eng+mat)/3 as ave, row_number() over (order by kor+eng+mat desc) as ranking from jspDB order by studentid asc) as a where name=?";
        //String query2 = String.format("select *, kor+eng+mat as sum, (kor+eng+mat)/3 as ave, row_number() over (order by kor+eng+mat desc) as ranking from jspDB where name = '%s' order by studentid asc;",key);
		
        
        PreparedStatement pstmt = conn.prepareStatement(query);
      	pstmt.setString(1, key);
      	
        ResultSet rset1 = pstmt.executeQuery();

      out.write("\r\n");
      out.write("        <h1 align = center>[");
      out.print(key);
      out.write("] 조회</h1><!--해당 key값 head text 크기 1-->\r\n");
      out.write("        <!--테이블 형태 지정-->\r\n");
      out.write("        <table cellspacing=\"1\" width=600 border=\"1\" align = center>\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td bgcolor = gold width=\"50\"><p align=center><strong>이름</strong></p></td> <!--셀 형태 지정-->\r\n");
      out.write("                <td bgcolor = gold width=\"50\"><p align=center><strong>학번</strong></p></td> <!--셀 형태 지정-->\r\n");
      out.write("                <td bgcolor = gold width=\"50\"><p align=center><strong>국어</strong></p></td> <!--셀 형태 지정-->\r\n");
      out.write("                <td bgcolor = gold width=\"50\"><p align=center><strong>영어</strong></p></td> <!--셀 형태 지정-->\r\n");
      out.write("                <td bgcolor = gold width=\"50\"><p align=center><strong>수학</strong></p></td> <!--셀 형태 지정-->\r\n");
      out.write("                <td bgcolor = gold width=\"50\"><p align=center><strong>합계</strong></p></td> <!--셀 형태 지정-->\r\n");
      out.write("                <td bgcolor = gold width=\"50\"><p align=center><strong>평균</strong></p></td> <!--셀 형태 지정-->\r\n");
      out.write("                <td bgcolor = gold width=\"50\"><p align=center><strong>Ranking</strong></p></td> <!--셀 형태 지정-->\r\n");
      out.write("            </tr>\r\n");

			//반복문 
            while (rset1.next()){ // rset의 next값이 true일 때
           	
                out.println("<tr>");
             	// 셀 형태 지정
                out.println("<td width=50><p align=center style='color: #696969;'>"+rset1.getString(1)+"</p></td>");
             	// 셀 형태 지정, 해당 컬럼 값 string -> int 형 변환 
                out.println("<td width=50><p align=center>"+Integer.toString(rset1.getInt(2))+"</p></td>");
             	// 셀 형태 지정, 해당 컬럼 값 string -> int 형 변환 
                out.println("<td width=50><p align=center>"+Integer.toString(rset1.getInt(3))+"</p></td>");
             	// 셀 형태 지정, 해당 컬럼 값 string -> int 형 변환 
                out.println("<td width=50><p align=center>"+Integer.toString(rset1.getInt(4))+"</p></td>");
             	// 셀 형태 지정, 해당 컬럼 값 string -> int 형 변환 
                out.println("<td width=50><p align=center>"+Integer.toString(rset1.getInt(5))+"</p></td>");
             	// 셀 형태 지정, 해당 컬럼 값 string -> int 형 변환 
                out.println("<td width=50><p align=center>"+Integer.toString(rset1.getInt(6))+"</p></td>");
             	// 셀 형태 지정, 해당 컬럼 값 string -> int 형 변환 
                out.println("<td width=50><p align=center>"+Integer.toString(rset1.getInt(7))+"</p></td>");
             	// 셀 형태 지정, 해당 컬럼 값 string -> int 형 변환 
                out.println("<td width=50><p align=center>"+Integer.toString(rset1.getInt(8))+"</p></td>");
                out.println("<tr>");
           	
            }
            rset1.close(); // resultSet 종료
            conn.close(); // connection 종료
		}catch(Exception e){
			out.println("조회 오류입니다.\n");
			out.println(e);
		}

      out.write("\r\n");
      out.write("        </table> \r\n");
      out.write("    </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
