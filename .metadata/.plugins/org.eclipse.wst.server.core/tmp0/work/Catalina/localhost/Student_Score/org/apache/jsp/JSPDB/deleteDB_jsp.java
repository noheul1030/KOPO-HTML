/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.71
 * Generated at: 2023-06-02 14:13:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.JSPDB;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import javax.sql.*;
import java.io.*;
import java.util.*;
import java.net.*;

public final class deleteDB_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.net");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.sql");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<meta http-equiv = \"Content-Type\" content = \"text/html; charset = utf-8\" />\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write(" <!--java import-->\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("    	<meta charset=\"UTF-8\"> <!--인코딩 설정 UTF-8-->\r\n");
      out.write("    	<style>\r\n");
      out.write("    	@font-face {\r\n");
      out.write("                    font-family: \"D2CodingLigature\";\r\n");
      out.write("                    src: url(./D2CodingLigature/D2CodingBold-Ver1.3.2-20180524-ligature.ttf) format(\"truetype\");\r\n");
      out.write("                    font-weight: normal;\r\n");
      out.write("                }\r\n");
      out.write("                /*body 폰트 지정*/\r\n");
      out.write("                body{\r\n");
      out.write("                    font-family: 'D2CodingLigature',serif;\r\n");
      out.write("                }\r\n");
      out.write("		  table {\r\n");
      out.write("		    border-collapse: collapse;\r\n");
      out.write("		    width : 75%;\r\n");
      out.write("		  }\r\n");
      out.write("		  th, td {\r\n");
      out.write("		    border-bottom: 1px solid #444444;\r\n");
      out.write("		    padding: 10px;\r\n");
      out.write("		  }\r\n");
      out.write("		  th:first-child, td:first-child {\r\n");
      out.write("		    border-left: none;\r\n");
      out.write("		  }\r\n");
      out.write("		\r\n");
      out.write("		.fourth {\r\n");
      out.write("		  background: gold;\r\n");
      out.write("		  border-color: white;\r\n");
      out.write("		  color: black;\r\n");
      out.write("		  background-image: linear-gradient(45deg, yellow 50%, transparent 50%);\r\n");
      out.write("		  background-position: 100%;\r\n");
      out.write("		  background-size: 400%;\r\n");
      out.write("		  transition: background 300ms ease-in-out;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		.fourth:hover {\r\n");
      out.write("		  background-position: 0;\r\n");
      out.write("		}\r\n");
      out.write("		input{\r\n");
      out.write("			width: 200px; \r\n");
      out.write("			height: 40px; \r\n");
      out.write("			padding: 0px;\r\n");
      out.write("		}\r\n");
      out.write("		p{\r\n");
      out.write("		text-align: center;}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		  a {text-decoration-line: none; color: #696969;}\r\n");
      out.write("		  a:hover {\r\n");
      out.write("			  background-color: gold;\r\n");
      out.write("			  border-color: white;\r\n");
      out.write("			  color: black;\r\n");
      out.write("			  font-size : 15px;\r\n");
      out.write("			  background-image: linear-gradient(45deg, white 50%, transparent 50%);\r\n");
      out.write("			  background-position: 100%;\r\n");
      out.write("		  	  background-size: 400%;\r\n");
      out.write("			  transition: background 300ms ease-in-out;\r\n");
      out.write("		}\r\n");
      out.write("		.custom-size {\r\n");
      out.write("        	font-size: 15px;\r\n");
      out.write("        	background-color: gold;\r\n");
      out.write("        } \r\n");
      out.write("		</style>\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("    	<br>\r\n");
      out.write("    	<h1 align = center>데이터 삭제 완료</h1>\r\n");
      out.write("    	<form method = 'post' action = 'inputForm2.html'>	\r\n");
      out.write("			<table cellspacing=\"1\" width=\"400\" border=\"0\" align=\"center\" style=\"border-collapse: collapse;\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td width = 300></td>\r\n");
      out.write("					<td align=\"right\">\r\n");
      out.write("	  				<input class=\"fourth\" type=\"submit\" value=\"뒤로 가기\" style=\"width: 70px; height: 40px; padding: 0px;font-weight: bold;\"></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("		</form>	\r\n");
      out.write("			</table>\r\n");
      out.write(" ");
      
		//DB연동 
        Class.forName("com.mysql.jdbc.Driver");
		Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/noheul","root","shdmf1030@");
		//Connection conn = DriverManager.getConnection("jdbc:mysql://192.168.23.60:3307/kopo11","root","shdmf1030@");
        Statement stmt = conn.createStatement();
        
        // searchID를 받아서 해당 값을 삭제 
        int searchID = request.getParameter("searchID") != null ? Integer.parseInt(request.getParameter("searchID")) : 0;
        
        if(searchID != 0){
        String query = String.format("delete from jspDB where studentid = %d",searchID);        				
        stmt.execute(query);
        }
        
        ResultSet rset1 = stmt.executeQuery("select *, kor+eng+mat as sum, (kor+eng+mat)/3 as ave, row_number() over (order by kor+eng+mat desc) as ranking from jspDB order by studentid asc;");
        
     	List<String> score = new ArrayList<String>(); // new 리스트 선언
     	
        while (rset1.next()){
 			score.add(rset1.getString(1)+"\t"+Integer.toString(rset1.getInt(2))+"\t"+Integer.toString(rset1.getInt(3))+
 					"\t"+Integer.toString(rset1.getInt(4))+"\t"+Integer.toString(rset1.getInt(5))+"\t"+Integer.toString(rset1.getInt(6))
 					+"\t"+Integer.toString(rset1.getInt(7))+"\t"+Integer.toString(rset1.getInt(8)));
 		}

        int total = score.size();
        
        String fromParam = request.getParameter("from"); // input받은 from 값 변수에 저장
		String cntParam = request.getParameter("cnt"); // input받은 cnt 값 변수에 저장
		
		int from = 0; // 변수 초기값 지정
		int cnt = 10; // 변수 초기값 지정
		int fromByTen = 0; // 변수 초기값 지정
		int minpage = 1;
		int maxpage = (total%cnt == 0)?(total/cnt):(total/cnt)+1; // 변수 초기값 지정
		int LineCnt = 1; // 변수 초기값 지정
		
		int pageCheck=0; // 현재 페이지 계산
		
		
		// 각 변수의 값이 null 아니면 true 조건 
	    if (fromParam != null && cntParam != null) {
	        from = Integer.parseInt(fromParam); // 정수로 형변환 값 저장
	        cnt = Integer.parseInt(cntParam);   // 정수로 형변환 값 저장
	        // from을 정제하여 fromByTen 변수에 저장
			fromByTen = (int) (Math.floor((from - 1) / 10) * 10);
	    }
		
	    if(from > maxpage) {
            from = maxpage;
            fromByTen = (int) (Math.floor((from - 1) / 10) * 10);
        }
	    	    
     	// 5. C 현재 페이지 조정
    	/* 현재페이지가 0보다 작으면 */
    	if (from <= 1){pageCheck = 1;}
    	/* 현재 페이지가 최대페이지 보다 크면 */
    	else if (from > maxpage){pageCheck = maxpage;}
    	/* 1 ~ 최대페이지 */
    	else{pageCheck = from;}
    	
        stmt.close();
     	rset1.close();
     	conn.close();

      out.write("\r\n");
      out.write("		<!--테이블 형태 지정-->\r\n");
		try{
			// 반복문 
            while (true){ // rset의 next값이 true일 때 
      out.write("\r\n");
      out.write("	        <table cellspacing=\"1\" width=600 border=\"1\" align = center>\r\n");
      out.write("	            <tr bgcolor = gold width=\"50\" align = center style = \"font-weight : bold;\">\r\n");
      out.write("	                <td>이름</td> <!--셀 형태 지정-->\r\n");
      out.write("	                <td>학번</td> <!--셀 형태 지정-->\r\n");
      out.write("	                <td>국어</td> <!--셀 형태 지정-->\r\n");
      out.write("	                <td>영어</td> <!--셀 형태 지정-->\r\n");
      out.write("	                <td>수학</td> <!--셀 형태 지정-->\r\n");
      out.write("	                <td>합계</td> <!--셀 형태 지정-->\r\n");
      out.write("	                <td>평균</td> <!--셀 형태 지정-->\r\n");
      out.write("	                <td>Ranking</td> <!--셀 형태 지정-->\r\n");
      out.write("	            </tr>\r\n");
            	if(from <=1){                                  
                    from = 1;
                    fromByTen = 0;    
                    for(int i = 0; i < cnt; i++){               // 0~ cnt까지 도는 반복문
                    String[] listcut = score.get(i).split("\t");
                    
      out.write("               \r\n");
      out.write("                    <tr align = center>\r\n");
      out.write("                        <td><p align=center><a style=\"color: #696969;\" href = 'oneviewDB.jsp?key=");
      out.print(listcut[0]);
      out.write('\'');
      out.write('>');
      out.print(listcut[0]);
      out.write("</a></p></td> <!--배열 0번째 값-->\r\n");
      out.write("                        <td>");
      out.print(listcut[1]);
      out.write("</td>                                             <!--배열 1번째 값-->\r\n");
      out.write("                        <td>");
      out.print(listcut[2]);
      out.write("</td>                                             <!--배열 2번째 값-->\r\n");
      out.write("                        <td>");
      out.print(listcut[3]);
      out.write("</td>                                             <!--배열 3번째 값-->\r\n");
      out.write("                        <td>");
      out.print(listcut[4]);
      out.write("</td>                                              <!--배열 4번째 값--> \r\n");
      out.write("                        <td>");
      out.print(listcut[5]);
      out.write("</td>                                              <!--배열 5번째 값--> \r\n");
      out.write("                        <td>");
      out.print(listcut[6]);
      out.write("</td>                                              <!--배열 6번째 값--> \r\n");
      out.write("                        <td>");
      out.print(listcut[7]);
      out.write("</td>                                              <!--배열 7번째 값--> \r\n");
      out.write("                        </tr>\r\n");
              
                  	 } break;                                                // 반복문이 다 돌고 난후 break;
                 }else if(from > 1){                                         // from이 1보다 크면 true 
                     for(int i = (from-1)*cnt; i < ((from-1)*cnt)+cnt; i++){ // cnt의 값에 따라 바뀌는 반복문
                         String[] listcut = score.get(i).split("\t");         // score 리스트의 i값 가져와서 배열에 탭기준 구분 저장

      out.write("\r\n");
      out.write("	                     <tr align = center>\r\n");
      out.write("	                      <td><p align=center><a style=\"color: #696969;\" href = 'oneviewDB.jsp?key=");
      out.print(listcut[0]);
      out.write('\'');
      out.write('>');
      out.print(listcut[0]);
      out.write("</a></p></td> <!--배열 0번째 값-->\r\n");
      out.write("	                      <td>");
      out.print(listcut[1]);
      out.write("</td>                                             <!--배열 1번째 값-->\r\n");
      out.write("	                      <td>");
      out.print(listcut[2]);
      out.write("</td>                                             <!--배열 2번째 값-->\r\n");
      out.write("	                      <td>");
      out.print(listcut[3]);
      out.write("</td>                                             <!--배열 3번째 값-->\r\n");
      out.write("	                      <td>");
      out.print(listcut[4]);
      out.write("</td>                                              <!--배열 4번째 값--> \r\n");
      out.write("	                      <td>");
      out.print(listcut[5]);
      out.write("</td>                                              <!--배열 5번째 값--> \r\n");
      out.write("	                      <td>");
      out.print(listcut[6]);
      out.write("</td>                                              <!--배열 6번째 값--> \r\n");
      out.write("	                      <td>");
      out.print(listcut[7]);
      out.write("</td>                                              <!--배열 7번째 값--> \r\n");
      out.write("	                     </tr>\r\n");

                       } break;    // 반복문이 다 돌고 난후 break; 
	               }
				}
           }catch(Exception e){
           		e.printStackTrace();
           }
		
      out.write("      \r\n");
      out.write("        </table>\r\n");
      out.write("        <br>    \r\n");
      out.write("        <table border=\"1\" border-collapse:collapse; align = center width = 70%; style=\"table-layout: fixed;\">                   <!--테이블-->\r\n");
      out.write("            <tr align = center>                                                                                                 <!--tr 설정-->\r\n");
              if(from <= maxpage-(maxpage%10)) { 
      out.write("                                                                           <!--from 값이 maxpage 보다 작거나 같으면 true 조건-->\r\n");
      out.write("                    <td><a href=\"deleteDB.jsp?from=1&cnt=");
      out.print(cnt);
      out.write("\"><<</a></td>                                                      <!-- 테이블 링크 연결 -->\r\n");
                  if(from <= 10) { 
      out.write("                                                                                         <!--from 값이 10보다 작거나 크면 true 조건-->\r\n");
      out.write("                        <td><a href=\"deleteDB.jsp?from=1&cnt=");
      out.print(cnt);
      out.write("\"><</a></td>                                                   <!-- 테이블 링크 연결 -->\r\n");
                  }else { 
      out.write("\r\n");
      out.write("                        <td><a href=\"deleteDB.jsp?from=");
      out.print(pageCheck-10);
      out.write("&cnt=");
      out.print(cnt);
      out.write("\"><</a></td>                                    <!-- 테이블 링크 연결 -->\r\n");
                  } 
      out.write('\r');
      out.write('\n');
                  for(int i = 1; i <= 10; i++){ 
						if(pageCheck == fromByTen+i){
      out.write("                                                                            <!--1~10까지 도는 반복문-->\r\n");
      out.write("                    		<td class=\"custom-size\"><a href=\"deleteDB.jsp?from=");
      out.print(fromByTen+i);
      out.write("&cnt=");
      out.print(cnt);
      out.write('"');
      out.write('>');
      out.print(fromByTen+i);
      out.write("</a></td>                         <!-- 테이블 링크 연결 -->\r\n");
                  	}else{ 
      out.write("\r\n");
      out.write("							<td><a href=\"deleteDB.jsp?from=");
      out.print(fromByTen+i);
      out.write("&cnt=");
      out.print(cnt);
      out.write('"');
      out.write('>');
      out.print(fromByTen+i);
      out.write("</a></td> \r\n");
						} 
      out.write('\r');
      out.write('\n');
					} 
      out.write("\r\n");
      out.write("                    <td><a href=\"deleteDB.jsp?from=");
      out.print(pageCheck+10);
      out.write("&cnt=");
      out.print(cnt);
      out.write("\">></a></td>                                       <!-- 테이블 링크 연결 -->\r\n");
      out.write("                    <td><a href=\"deleteDB.jsp?from=");
      out.print(maxpage);
      out.write("&cnt=");
      out.print(cnt);
      out.write("\">>></a></td>                                           <!-- 테이블 링크 연결 -->\r\n");
              }else { 
      out.write("\r\n");
      out.write("                    <td><a href=\"deleteDB.jsp?from=1&cnt=");
      out.print(cnt);
      out.write("\"><<</a></td>                                                      <!-- 테이블 링크 연결 -->\r\n");
      out.write("                    <td><a href=\"deleteDB.jsp?from=");
      out.print(pageCheck-10);
      out.write("&cnt=");
      out.print(cnt);
      out.write("\"><</a></td>                                        <!-- 테이블 링크 연결 -->\r\n");
      out.write("\r\n");
                  for(int i = 1; i <= maxpage%10; i++){ 
						if(pageCheck == fromByTen+i){
      out.write("                                                                    <!--1~나머지 값 만큼 도는 반복문 -->\r\n");
      out.write("                    		<td class=\"custom-size\"><a href=\"deleteDB.jsp?from=");
      out.print(fromByTen+i);
      out.write("&cnt=");
      out.print(cnt);
      out.write('"');
      out.write('>');
      out.print(fromByTen+i);
      out.write("</a></td>                         <!-- 테이블 링크 연결 -->\r\n");
                  	}else{ 
      out.write("\r\n");
      out.write("							<td><a href=\"deleteDB.jsp?from=");
      out.print(fromByTen+i);
      out.write("&cnt=");
      out.print(cnt);
      out.write('"');
      out.write('>');
      out.print(fromByTen+i);
      out.write("</a></td> \r\n");
						} 
      out.write('\r');
      out.write('\n');
					} 
      out.write('\r');
      out.write('\n');
                  if(maxpage-(maxpage%10)< from){ 
      out.write("                                                                          <!--ㅡmaxpage-나머지 값이 from보다 작으면 -->\r\n");
      out.write("                        <td><a href=\"deleteDB.jsp?from=");
      out.print(maxpage);
      out.write("&cnt=");
      out.print(cnt);
      out.write("\">></a></td>                                        <!-- 테이블 링크 연결 -->\r\n");
                  }else { 
      out.write("\r\n");
      out.write("                        <td><a href=\"deleteDB.jsp?from=");
      out.print(pageCheck+10);
      out.write("&cnt=");
      out.print(cnt);
      out.write("\">></a></td>                                   <!-- 테이블 링크 연결 -->\r\n");
                  } 
      out.write("\r\n");
      out.write("                    <td><a href=\"deleteDB.jsp?from=");
      out.print(maxpage);
      out.write("&cnt=");
      out.print(cnt);
      out.write("\">>></a></td>                                           <!-- 테이블 링크 연결 -->\r\n");
              } 
      out.write("\r\n");
      out.write("			</tr>\r\n");
      out.write("        </table>\r\n");
      out.write("\r\n");
      out.write("    </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
